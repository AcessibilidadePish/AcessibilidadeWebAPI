# This workflow will build and push a .NET Core app to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-dotnetcore?tabs=net60&pivots=development-environment-vscode
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the value for the AZURE_WEBAPP_NAME. Optionally, change the AZURE_WEBAPP_PACKAGE_PATH and DOTNET_VERSION environment variables below.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

name: Build and deploy ASP.Net Core app to an Azure Web App

env:
  AZURE_WEBAPP_NAME: AS-AcessibilidadeWebAPI    # nome do seu App Service
  AZURE_WEBAPP_PACKAGE_PATH: './published'      # caminho para o pacote de deploy
  DOTNET_VERSION: '8.0.x'                       # vers√£o do .NET

on:
  push:
    branches: [ "master" ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Checa o reposit√≥rio
      - name: Checkout repository
        uses: actions/checkout@v4

      # Instala o .NET SDK 8
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      # Restaura os pacotes NuGet
      - name: Restore dependencies
        run: dotnet restore AcessibilidadeWebAPI/AcessibilidadeWebAPI.csproj

      # Compila o projeto
      - name: Build
        run: dotnet build AcessibilidadeWebAPI/AcessibilidadeWebAPI.csproj --configuration Release --no-restore

      # Executa os testes
      - name: Run tests
        run: dotnet test AcessibilidadeWebAPI.Tests/AcessibilidadeWebAPI.Tests.csproj --configuration Release --no-build --verbosity normal

      # Publica APENAS o projeto principal (sem testes)
      - name: Publish
        run: |
          dotnet publish AcessibilidadeWebAPI/AcessibilidadeWebAPI.csproj \
            -c Release \
            -o published \
            --no-build \
            --self-contained false

      # Copia arquivo de startup para pasta publicada
      - name: Copy startup script
        run: |
          cp startup.sh published/
          chmod +x published/startup.sh

      # Lista arquivos publicados para debug
      - name: List published files
        run: |
          echo "üìÅ Arquivos publicados:"
          ls -la published/
          echo "üìù Verificando arquivos runtimeconfig:"
          find published -name "*.runtimeconfig.json" -type f
          echo "üìù Verificando startup.sh:"
          ls -la published/startup.sh || echo "startup.sh n√£o encontrado"

      # Faz o deploy para o Azure App Service
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
