# Setup Git Hooks - AcessibilidadeWebAPI
# Script para configurar automaticamente os git hooks

Write-Host "üîß Configurando Git Hooks - AcessibilidadeWebAPI" -ForegroundColor Cyan
Write-Host "=================================================" -ForegroundColor Cyan

# Verificar se estamos no diret√≥rio correto
if (-not (Test-Path ".git")) {
    Write-Host "‚ùå ERRO: N√£o foi encontrado diret√≥rio .git" -ForegroundColor Red
    Write-Host "‚ùå Execute este script na raiz do reposit√≥rio AcessibilidadeWebAPI" -ForegroundColor Red
    exit 1
}

# Verificar se o diret√≥rio hooks existe
$hooksDir = ".git/hooks"
if (-not (Test-Path $hooksDir)) {
    Write-Host "üìÅ Criando diret√≥rio de hooks..." -ForegroundColor Yellow
    New-Item -ItemType Directory -Path $hooksDir -Force | Out-Null
}

Write-Host "üìã Configurando hook pre-push..." -ForegroundColor Blue

# Copiar arquivos de hook se eles existem
if (Test-Path ".git/hooks/pre-push") {
    Write-Host "‚úÖ Hook pre-push j√° existe" -ForegroundColor Green
} else {
    Write-Host "‚ùå Arquivo pre-push n√£o encontrado em .git/hooks/" -ForegroundColor Red
    Write-Host "üîß Criando hook b√°sico..." -ForegroundColor Yellow
    
    # Criar hook b√°sico que chama o PowerShell
    $hookContent = @"
#!/bin/bash
# Git Pre-Push Hook - AcessibilidadeWebAPI
echo "ü™ü Executando pre-push validation..."
powershell.exe -ExecutionPolicy Bypass -File "`$(git rev-parse --git-dir)/hooks/pre-push.ps1"
"@
    
    Set-Content -Path ".git/hooks/pre-push" -Value $hookContent -Encoding UTF8
}

if (Test-Path ".git/hooks/pre-push.ps1") {
    Write-Host "‚úÖ Hook PowerShell j√° existe" -ForegroundColor Green
} else {
    Write-Host "‚ùå Arquivo pre-push.ps1 n√£o encontrado em .git/hooks/" -ForegroundColor Red
    Write-Host "üí° Certifique-se de que o arquivo pre-push.ps1 existe na pasta .git/hooks/" -ForegroundColor Yellow
}

# Testar se dotnet est√° dispon√≠vel
Write-Host "üîç Verificando depend√™ncias..." -ForegroundColor Blue

try {
    $dotnetVersion = dotnet --version
    Write-Host "‚úÖ .NET SDK encontrado: $dotnetVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå ERRO: .NET SDK n√£o encontrado!" -ForegroundColor Red
    Write-Host "‚ùå Instale o .NET SDK antes de continuar." -ForegroundColor Red
    exit 1
}

# Testar build do projeto
Write-Host "üß™ Testando build do projeto..." -ForegroundColor Blue

$buildTest = dotnet build AcessibilidadeWebAPI/AcessibilidadeWebAPI.csproj --verbosity quiet

if ($LASTEXITCODE -eq 0) {
    Write-Host "‚úÖ Projeto compila corretamente" -ForegroundColor Green
} else {
    Write-Host "‚ö†Ô∏è  AVISO: Projeto n√£o compila no momento" -ForegroundColor Yellow
    Write-Host "‚ö†Ô∏è  Corrija os erros de compila√ß√£o antes do pr√≥ximo push" -ForegroundColor Yellow
}

# Sucesso
Write-Host ""
Write-Host "üéâ CONFIGURA√á√ÉO CONCLU√çDA!" -ForegroundColor Green
Write-Host ""
Write-Host "üìã O que foi configurado:" -ForegroundColor Cyan
Write-Host "  ‚úÖ Git hooks configurados" -ForegroundColor Green
Write-Host "  ‚úÖ Pre-push validation ativado" -ForegroundColor Green
Write-Host "  ‚úÖ Build e testes ser√£o executados antes do push" -ForegroundColor Green
Write-Host ""
Write-Host "üöÄ Como funciona:" -ForegroundColor Cyan
Write-Host "  1. Voc√™ faz commit normalmente: git commit -m 'mensagem'" -ForegroundColor White
Write-Host "  2. Quando fizer push: git push origin main" -ForegroundColor White
Write-Host "  3. O hook ir√° automaticamente:" -ForegroundColor White
Write-Host "     - Compilar o projeto" -ForegroundColor Yellow
Write-Host "     - Executar todos os testes" -ForegroundColor Yellow
Write-Host "     - Validar corre√ß√£o DataConclusao" -ForegroundColor Yellow
Write-Host "     - S√≥ permitir push se tudo estiver OK" -ForegroundColor Yellow
Write-Host ""
Write-Host "üí° Para testar manualmente:" -ForegroundColor Cyan
Write-Host "   powershell .git/hooks/pre-push.ps1" -ForegroundColor White
Write-Host ""

exit 0 